# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class AppAdminBus(models.Model):
    bus_id = models.AutoField(primary_key=True)
    bus_name = models.CharField(max_length=30)
    status = models.CharField(max_length=3)
    route = models.ForeignKey('AppAdminRoute', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'app_admin_bus'


class AppAdminBusStop(models.Model):
    bus = models.ForeignKey(AppAdminBus, models.DO_NOTHING)
    stop = models.ForeignKey('AppAdminStop', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'app_admin_bus_stop'


class AppAdminCoordReporter(models.Model):
    reporter_id = models.AutoField(primary_key=True)
    acceptance_date = models.DateTimeField()
    request = models.ForeignKey('AppAdminCoordReporterRequest', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'app_admin_coord_reporter'


class AppAdminCoordReporterRequest(models.Model):
    request_id = models.AutoField(primary_key=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=250)
    cell_number = models.CharField(max_length=13)
    request_created_date_time = models.DateTimeField()
    respond_date_time = models.DateTimeField(blank=True, null=True)
    respond_status = models.CharField(max_length=3)
    requestedfor_bus_number = models.ForeignKey(AppAdminBus, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'app_admin_coord_reporter_request'


class AppAdminRoute(models.Model):
    route_id = models.AutoField(primary_key=True)
    route_name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'app_admin_route'


class AppAdminStop(models.Model):
    stop_id = models.AutoField(primary_key=True)
    stop_name = models.CharField(max_length=50)
    route = models.ForeignKey(AppAdminRoute, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'app_admin_stop'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
